#!/usr/bin/Rscript --vanilla
#
# DiaScore GoldSpans TestSpans
# 
# Framewise diarization scores
#
args <- commandArgs(trailingOnly = TRUE)
nargs = length(args)
if(nargs != 2){
  cat(sprintf("Usage: DiaScore GoldSpans TestSpans\n"))
  cat(sprintf("\twhere both files are sequences of triples\n"))
  cat(sprintf("\tFRAME1 FRAME2 LABEL\n"))
  cat(sprintf("\t\tFRAMEs are integer frame numbers\n"))
  cat(sprintf("\t\tand LABELS are arbitrary strings representing speaker IDs\n"))
  q(save="no")
}
#####################################
GOLDfile = args[1]; TESTfile = args[2]
#
TESTin = read.table(TESTfile)
GOLDin = read.table(GOLDfile)
NFrames = max(c(TESTin[,2],GOLDin[,2]))
GoldLevels = c(levels(GOLDin[,3]),"nil")
TestLevels = c(levels(TESTin[,3]), "nil")
NGLevels = length(GoldLevels)
NTLevels =length(TestLevels)
#
##############################
# Make framewise activity maps
#############################
TESTmap = matrix(data=FALSE, nrow=NFrames, ncol=NTLevels)
colnames(TESTmap) = TestLevels
GOLDmap = matrix(data=FALSE, nrow=NFrames, ncol=NGLevels)
colnames(GOLDmap) = GoldLevels
#
for(n in 1:length(TESTin[,1])){
  TESTmap[TESTin[n,1]:TESTin[n,2],TESTin[n,3]] = TRUE
}
#
for(n in 1:length(GOLDin[,1])){
   GOLDmap[GOLDin[n,1]:GOLDin[n,2],GOLDin[n,3]] = TRUE
}
#
# Fill in silence values
which = (apply(TESTmap,1,sum)==0)
TESTmap[which,"nil"] = TRUE
which = (apply(GOLDmap,1,sum)==0)
GOLDmap[which,"nil"] = TRUE

##########################

#################################
# Calculate confusion matrix:
#############################
Confusion = matrix(nrow=NGLevels,ncol=NTLevels)
rownames(Confusion) = GoldLevels
colnames(Confusion) = TestLevels
##############
for(gl in GoldLevels){
    for(tl in TestLevels){
              Confusion[gl,tl] = sum(GOLDmap[,gl]&TESTmap[,tl])
       }
}
##################################
# Reorder columns for best fit...
#################################
bestrow=vector(length=NTLevels-1, mode="integer")
for(col in 1:(NTLevels-1)){
  bestrow[col] = which.max(Confusion[1:(NGLevels-1),col])
}
NewConfusion = Confusion[,c(order(bestrow),NTLevels)]
#
##########################################
# Check speaker-wise precision and recall
#   First, including silence
##########################################
Precision = vector(length=NGLevels,mode="numeric")
Recall = vector(length=NGLevels,mode="numeric")
F1 = vector(length=NGLevels,mode="numeric")
names(Precision)=GoldLevels
names(Recall)=GoldLevels
names(F1)=GoldLevels
#
for(n in 1:(NGLevels-1)){
  if(n <= (NTLevels-1)){
     Precision[n] = NewConfusion[n,n]/sum(NewConfusion[,n])
     Recall[n] = NewConfusion[n,n]/sum(NewConfusion[n,])
     F1[n] = 2*(Precision[n]*Recall[n])/(Precision[n]+Recall[n])
   }
   else { Recall[n] = 0.0; Precision[n] = NA; F1[n] = NA}
}
# "nil" (=silence) case
Precision[NGLevels] = NewConfusion["nil","nil"]/sum(NewConfusion[,"nil"])
Recall[NGLevels] = NewConfusion["nil","nil"]/sum(NewConfusion["nil",])
F1[NGLevels] = 2*Precision[NGLevels]*Recall[NGLevels]/(Precision[NGLevels]+Recall[NGLevels])
####
Scores1 = rbind(Precision,Recall,F1)
colnames(Scores1) = GoldLevels
rownames(Scores1) = c("Precision","Recall","F1")
#
##########################################
# Now do SAD and Speaker ID separately
#######################################
Precision1 = vector(length=NGLevels,mode="numeric")
Recall1 = vector(length=NGLevels,mode="numeric")
F11 = vector(length=NGLevels,mode="numeric")
#
for(n in 1:(NGLevels-1)){
  if(n <= (NTLevels-1)){
     Precision1[n] = NewConfusion[n,n]/sum(NewConfusion[1:(NGLevels-1),n])
     Recall1[n] = NewConfusion[n,n]/sum(NewConfusion[n,1:(NTLevels-1)])
     F11[n] = 2*(Precision1[n]*Recall1[n])/(Precision1[n]+Recall1[n])
   }
   else { Recall1[n] = 0.0; Precision1[n] = NA; F11[n] = NA}
}
# "nil" (=silence) case
Precision1[NGLevels] = NewConfusion["nil","nil"]/sum(NewConfusion[,"nil"])
Recall1[NGLevels] = NewConfusion["nil","nil"]/sum(NewConfusion["nil",])
F11[NGLevels] = 2*Precision1[NGLevels]*Recall1[NGLevels]/(Precision1[NGLevels]+Recall1[NGLevels])
####
Scores2 = rbind(Precision1,Recall1,F11)
colnames(Scores2) = GoldLevels
rownames(Scores2) = c("Precision","Recall","F1")
#
#######################################
# Now Precision and Recall for overlaps
######################################
#
GoldOverlaps = (apply(GOLDmap,1,sum)>1)
TestOverlaps = (apply(TESTmap,1,sum)>1)
OverlapPrecision = sum(GoldOverlaps&TestOverlaps)/sum(TestOverlaps)
OverlapRecall = sum(GoldOverlaps&TestOverlaps)/sum(GoldOverlaps)
OverlapF1 = 2*OverlapPrecision*OverlapRecall/(OverlapPrecision+OverlapRecall)
OverlapResults = c(OverlapPrecision,OverlapRecall, OverlapF1)
names(OverlapResults) = c("Precision","Recall","F1")
#####################
# Print out results:
####################
cat(sprintf("\nConfusion Matrix, with columns permuted for best score:\n"))
print.table(NewConfusion)
#
cat(sprintf("\nFrame-wise per-speaker scores, including the silence category:\n"))
print.table(round(Scores1,digits=3),na.print="NA")
#
cat(sprintf("\nFrame-wise per-speaker scores, treating speech/silence separately:\n"))
print.table(round(Scores2,digits=3),na.print="NA")
#
cat(sprintf("\n"))
#
cat(sprintf("\nFrame-wise overlap detection scores:\n"))
print.table(round(OverlapResults,digits=3),na.print="NA")
